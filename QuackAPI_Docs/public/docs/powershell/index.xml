<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PowerShell on m2s docs</title>
    <link>http://localhost:1313/docs/powershell/</link>
    <description>Recent content in PowerShell on m2s docs</description>
    <generator>Hugo</generator>
    <language>en-gb</language>
    <lastBuildDate>Thu, 08 Feb 2024 20:04:15 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/docs/powershell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>One Liners</title>
      <link>http://localhost:1313/docs/powershell/oneliners/</link>
      <pubDate>Thu, 08 Feb 2024 20:01:44 +0000</pubDate>
      <guid>http://localhost:1313/docs/powershell/oneliners/</guid>
      <description>&lt;p&gt;This page will be a selection of useful one-liners&lt;/p&gt;&#xA;&lt;h2 id=&#34;notes&#34;&gt;Notes &lt;a href=&#34;#notes&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;When you see &amp;ldquo;$User&amp;rdquo;, replace this with the username of the account you are querying.&lt;br&gt;&#xA;You may need to run &amp;ldquo;Import-Module ActiveDirectory&amp;rdquo; if things fail.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;All of theses can be found as functions in&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;../../powershell/machsfunctions&#34;&gt;Mach&amp;rsquo;s Functions&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;password-last-set&#34;&gt;Password Last Set &lt;a href=&#34;#password-last-set&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;  &lt;div class=&#34;prism-codeblock &#34;&gt;&#xD;&#xA;  &lt;pre id=&#34;559eb02&#34; class=&#34;language-PowerShell &#34;&gt;&#xD;&#xA;  &lt;code&gt;get-aduser $user -properties passwordlastset, lastLogon select name, passwordlastset, @{n=&amp;#39;LastLogon&amp;#39;;e={[DateTime]::FromFileTime($_.LastLogon)}}&lt;/code&gt;&#xD;&#xA;  &lt;/pre&gt;&#xD;&#xA;  &lt;/div&gt;&#xD;&#xA;&lt;h3 id=&#34;computer-password-last-set&#34;&gt;Computer Password Last Set &lt;a href=&#34;#computer-password-last-set&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This gets ALL COMPUTERS IN AD where there password was last set before the date, its a dirty way of finding VERY stale computers.  There are better ways of doing this and i will add&#xA;them to the site. But this works too.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Machs Functions</title>
      <link>http://localhost:1313/docs/powershell/machsfunctions/</link>
      <pubDate>Thu, 08 Feb 2024 20:01:44 +0000</pubDate>
      <guid>http://localhost:1313/docs/powershell/machsfunctions/</guid>
      <description>&lt;p&gt;This will be a large mishmash of useful PowerShell functions.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;This contains everything from&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;powershell/oneliners/&#34;&gt;One Liners&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;to-pull-in&#34;&gt;To Pull In &lt;a href=&#34;#to-pull-in&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;../../Scripts/Mach-Functions.psm1&#34;&gt;Mach-Functions.psm1&lt;/a&gt;&lt;/p&gt;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;  &lt;div class=&#34;prism-codeblock &#34;&gt;&#xD;&#xA;  &lt;pre id=&#34;0a8fe97&#34; class=&#34;language-PowerShell &#34;&gt;&#xD;&#xA;  &lt;code&gt;Import-Module &amp;#34;C:\Scripts\Mach-Functions.psm1&amp;#34;&lt;/code&gt;&#xD;&#xA;  &lt;/pre&gt;&#xD;&#xA;  &lt;/div&gt;&#xD;&#xA;&lt;h2 id=&#34;debug-write&#34;&gt;Debug Write &lt;a href=&#34;#debug-write&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Possibly redundant, but you can use this to choose if to print certain elements to the console based on a passed through Boolean.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;  &lt;div class=&#34;prism-codeblock &#34;&gt;&#xD;&#xA;  &lt;pre id=&#34;b71658e&#34; class=&#34;language-Powershell &#34;&gt;&#xD;&#xA;  &lt;code&gt;DBW &amp;#34;Text&amp;#34; &amp;#34;Colour&amp;#34; $trueORfalse&lt;/code&gt;&#xD;&#xA;  &lt;/pre&gt;&#xD;&#xA;  &lt;/div&gt;&#xD;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Function&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;  &lt;div class=&#34;prism-codeblock &#34;&gt;&#xD;&#xA;  &lt;pre id=&#34;dfd9e19&#34; class=&#34;language-PowerShell &#34;&gt;&#xD;&#xA;  &lt;code&gt;function DBW {&#xD;&#xA;  param (&#xD;&#xA;      [string]$ToPrint,&#xD;&#xA;      [string]$Colour,&#xD;&#xA;      [bool]$Shouldwrite&#xD;&#xA;  )&#xD;&#xA;  if ($Shouldwrite){&#xD;&#xA;      Write-host $ToPrint -ForegroundColor $Colour&#xD;&#xA;  }&#xD;&#xA;}&lt;/code&gt;&#xD;&#xA;  &lt;/pre&gt;&#xD;&#xA;  &lt;/div&gt;&#xD;&#xA;&lt;h2 id=&#34;get-password-last-set&#34;&gt;Get Password Last Set &lt;a href=&#34;#get-password-last-set&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Gets the last time a password was set for the user&lt;/p&gt;</description>
    </item>
    <item>
      <title>Colour Ping</title>
      <link>http://localhost:1313/docs/powershell/colourping/</link>
      <pubDate>Thu, 08 Feb 2024 20:04:15 +0000</pubDate>
      <guid>http://localhost:1313/docs/powershell/colourping/</guid>
      <description>&lt;p&gt;This script will ping an IP Address until told to stop, giving you a colour coded output depending on the set latency values.&lt;br&gt;&#xA;This for instance would allow you to be pinging a server and see the outliers of latency.&lt;/p&gt;&#xA;&lt;h2 id=&#34;notes&#34;&gt;Notes &lt;a href=&#34;#notes&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Example output of the script, using very aggressive values for testing/demo.&lt;br&gt;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-script-itself&#34;&gt;The Script itself &lt;a href=&#34;#the-script-itself&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;../../PowerShell/ColourPing.ps1&#34;&gt;ColourPing.ps1&lt;/a&gt;&lt;/p&gt;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;  &lt;div class=&#34;prism-codeblock &#34;&gt;&#xD;&#xA;  &lt;pre id=&#34;991ff83&#34; class=&#34;language-powershell &#34;&gt;&#xD;&#xA;  &lt;code&gt;$LowThreshold = 12 ## 0 - 12 shows green&#xD;&#xA;$MedThreshold = 25 ## 13-25 Shows yellow, 25-50 orange&#xD;&#xA;$ErrorThreshold = 50 ## Above 50 Shows text in red&#xD;&#xA;$Target = &amp;#34;1.1.1.1&amp;#34; #read-host ## Comment this line out with ## and uncomment the bellow line to get it to ask you for input on each run&#xD;&#xA;##$Target = read-host&#xD;&#xA;while($true){&#xD;&#xA;start-sleep(1) ## Wait 1 second&#xD;&#xA;$Response = test-connection $Target -Count 1 #Do the ping&#xD;&#xA;if (  $PSVersionTable.PSVersion -lt 7){ #Check PS Version as they change the output info for V7&#xD;&#xA;  $Time = $Response | select -ExpandProperty ResponseTime&#xD;&#xA;  $IPV4 = $Response | select -ExpandProperty IPV4Address&#xD;&#xA;  $DEST = $Response | select -ExpandProperty Address &#xD;&#xA;}&#xD;&#xA;else {&#xD;&#xA;  $Time = $Response | select -ExpandProperty Latency&#xD;&#xA;  $IPV4 = $Response | select -ExpandProperty Address&#xD;&#xA;  $DEST = $Response | select -ExpandProperty Address &#xD;&#xA;}&#xD;&#xA;  write-host &amp;#34;Pinged $DEST ($IPV4) THIS TOOK &amp;#34; -foregroundcolor blue -nonewline # Print info to console &#xD;&#xA;if ($time -le $LowThreshold){&#xD;&#xA;  write-host $time -foregroundcolor green -nonewline&#xD;&#xA;  write-host &amp;#34;MS&amp;#34;&#xD;&#xA;}elseif($time -le $MedThreshold){&#xD;&#xA;  write-host $time -foregroundcolor yellow -nonewline&#xD;&#xA;  write-host &amp;#34;MS&amp;#34;&#xD;&#xA;}elseif($time -le $ErrorThreshold){&#xD;&#xA;  write-host $time -foregroundcolor magenta -nonewline&#xD;&#xA;  write-host &amp;#34;MS&amp;#34;&#xD;&#xA;}else{&#xD;&#xA;  write-host $time -foregroundcolor red -nonewline&#xD;&#xA;  write-host &amp;#34;MS&amp;#34;&#xD;&#xA;}&#xD;&#xA;}&lt;/code&gt;&#xD;&#xA;  &lt;/pre&gt;&#xD;&#xA;  &lt;/div&gt;</description>
    </item>
    <item>
      <title>Log AD Group Memberships</title>
      <link>http://localhost:1313/docs/powershell/getandloggroupmeberships/</link>
      <pubDate>Thu, 08 Feb 2024 20:04:15 +0000</pubDate>
      <guid>http://localhost:1313/docs/powershell/getandloggroupmeberships/</guid>
      <description>&lt;p&gt;This script will create a text file containing group memberships, for each member of the OU Specified in the search base.&lt;br&gt;&#xA;This script will work on&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;user, computer, group, or service account&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;notes&#34;&gt;Notes &lt;a href=&#34;#notes&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;See &lt;a href=&#34;http://localhost:1313/../../PowerShell/#Date-Formatting&#34;&gt;Date Formatting&lt;/a&gt; if you wish to change the date format&lt;br&gt;&#xA;Make sure you set the &lt;a href=&#34;http://localhost:1313/../../PowerShell/#SearchBase&#34;&gt;Search Base&lt;/a&gt; otherwise it will scan the entirety of active directory&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-script-itself&#34;&gt;The Script itself &lt;a href=&#34;#the-script-itself&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;../../Scripts/GetandLogGroupMeberships.ps1&#34;&gt;GetandLogGroupMemberships.ps1&lt;/a&gt;&lt;/p&gt;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;      &lt;div class=&#34;prism-shortcode&#34;&gt;&#xD;&#xA;      &lt;pre id=&#34;d0c45dc&#34; class=&#34;language-powershell line-numbers linkable-line-numbers&#34;&#xD;&#xA;        &gt;&lt;code class=&#34;language-powershell&#34;&#xD;&#xA;        &gt;$Users = Get-ADUser -SearchBase &amp;#34;OU=YOUROUHERE,DC=DOMAIN,DC=TLD&amp;#34; -Filter * | select -ExpandProperty SamAccountName ##This gets all the users in a specifed OU&#xD;&#xA;$Date = get-date -Format ddMMyyyy ## Gets the date in Day Month Year number&#xD;&#xA;$LogLocation = &amp;#34;C:\Scripts\Data\$Date&amp;#34; ## Where the logs will be made, this can be UNC&#xD;&#xA;New-Item $LogLocation -Force -ItemType Directory ## Creates the dated folder&#xD;&#xA;ForEach ($User in $Users){ ## For each user found  &#xD;&#xA;    $LogLocationName = &amp;#34;$LogLocation\$User.txt&amp;#34; ## Prep name of file&#xD;&#xA;    New-Item $LogLocationName ## Create file  &#xD;&#xA;    Get-ADPrincipalGroupMembership $User | select name | Out-File $LogLocationName -Append ## Write group memberships to the folder&#xD;&#xA;}&#xD;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;      &lt;/div&gt;</description>
    </item>
    <item>
      <title>Mass Message</title>
      <link>http://localhost:1313/docs/powershell/massmessage/</link>
      <pubDate>Thu, 08 Feb 2024 20:04:15 +0000</pubDate>
      <guid>http://localhost:1313/docs/powershell/massmessage/</guid>
      <description>&lt;p&gt;This script will look through AD and send a message to all Computers that match a wildcard name, IE entering admin will match with admin-55, site1-admin, site1-amdin-11 etc.&lt;br&gt;&#xA;OR it will go through an OU Given by &lt;a href=&#34;http://localhost:1313/../../PowerShell/#SearchBase&#34;&gt;Search Base&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;It will then display the message for the set time (MS) set to 600 by default.&lt;/p&gt;&#xA;&lt;h2 id=&#34;notes&#34;&gt;Notes &lt;a href=&#34;#notes&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Example output of the message shown.&lt;br&gt;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-script-itself&#34;&gt;The Script itself &lt;a href=&#34;#the-script-itself&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;../../PowerShell/MassMessage.ps1&#34;&gt;MassMessage.ps1&lt;/a&gt;&lt;/p&gt;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;  &lt;div class=&#34;prism-codeblock &#34;&gt;&#xD;&#xA;  &lt;pre id=&#34;630b332&#34; class=&#34;language-powershell &#34;&gt;&#xD;&#xA;  &lt;code&gt;$ComputerName = read-host &amp;#34;Enter Computer name Do not include * For wild cards. it is added Automatically&amp;#34;&#xD;&#xA;$Computers = Get-ADComputer -Filter &amp;#34;Name -like &amp;#39;*$ComputerName*&amp;#39;&amp;#34; | select-object -ExpandProperty name ##Gets all all Computers with a host name entered above&#xD;&#xA;##Comment out the two lines above and uncomment the one bellow if you prefer to do it based on OU &#xD;&#xA;#$Computers = Get-ADComputer -SearchBase &amp;#34;OU=YOUROUHERE,DC=DOMAIN,DC=TLD&amp;#34; -Filter * | select-object -ExpandProperty name&#xD;&#xA;$msg = read-host &amp;#34;Please enter your message&amp;#34; #Enter The Message you want it to be &#xD;&#xA;ForEach ($Computer in $Computers) {&#xD;&#xA;    if (test-Connection $Computer -Count 1 -Quiet ) { &#xD;&#xA;    Write-Host &amp;#34;Sending $msg to $Computer&amp;#34;&#xD;&#xA;    Invoke-WmiMethod `&#xD;&#xA;        -Path Win32_Process `&#xD;&#xA;        -Name Create `&#xD;&#xA;        -ArgumentList &amp;#34;msg * /time:600 $msg&amp;#34; `&#xD;&#xA;        -ComputerName $Computer&#xD;&#xA;}&#xD;&#xA;}&lt;/code&gt;&#xD;&#xA;  &lt;/pre&gt;&#xD;&#xA;  &lt;/div&gt;</description>
    </item>
    <item>
      <title>Profile Yeeter</title>
      <link>http://localhost:1313/docs/powershell/profilefix/</link>
      <pubDate>Thu, 08 Feb 2024 20:04:15 +0000</pubDate>
      <guid>http://localhost:1313/docs/powershell/profilefix/</guid>
      <description>&lt;p&gt;This script will remove local profiles on a computer and then restarts it.&lt;/p&gt;&#xA;&lt;p&gt;With a list of Users that can be excluded.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;This needs to be run as an admin.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-script-itself&#34;&gt;The Script itself &lt;a href=&#34;#the-script-itself&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;../../PowerShell/Scripts/ProfileFix.ps1&#34;&gt;ProfileFix.ps1&lt;/a&gt;&lt;/p&gt;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;  &lt;div class=&#34;prism-codeblock &#34;&gt;&#xD;&#xA;  &lt;pre id=&#34;6d95142&#34; class=&#34;language-powershell &#34;&gt;&#xD;&#xA;  &lt;code&gt;$LoggedInUsers =  (Get-WMIObject -ClassName Win32_ComputerSystem).Username.substring(4) &#xD;&#xA;$Dirs = Get-ChildItem c:\users\ -Exclude &amp;#34;Public&amp;#34;, $LoggedInUsers,&amp;#34;Default&amp;#34; | select -ExpandProperty Name&#xD;&#xA;get-volume&#xD;&#xA;foreach ($dir in $dirs) {&#xD;&#xA;  write-host &amp;#34;Trying to remove profile with path of $dir&amp;#34; -forgroundcolor green&#xD;&#xA;  Get-CimInstance -Class Win32_UserProfile | Where-Object { $_.LocalPath.split(&amp;#39;\&amp;#39;)[-1] -eq $dir } | Remove-CimInstance&#xD;&#xA;  write-host &amp;#34;Removable attempt complete&amp;#34; -forgroundcolor blue&#xD;&#xA;}&#xD;&#xA;shutdown -r -t 0 -f&lt;/code&gt;&#xD;&#xA;  &lt;/pre&gt;&#xD;&#xA;  &lt;/div&gt;</description>
    </item>
    <item>
      <title>From CSV To AD Group</title>
      <link>http://localhost:1313/docs/powershell/csvtogroup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/powershell/csvtogroup/</guid>
      <description>&lt;p&gt;This script will read from a CSV and add users with the email in it to an AD Group.&lt;/p&gt;&#xA;&lt;p&gt;This is very useful when you need an non IT Person to be able to add users to a group, without them going within 100 miles of AD, or involving IT.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;This needs to be run as an admin with AD Perms.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;requires-machys-functions&#34;&gt;REQUIRES Machy&amp;rsquo;s Functions &lt;a href=&#34;#requires-machys-functions&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Requires the DBW Function from this script. You can just add the function to the top of the file.&lt;br&gt;&#xA;&lt;a href=&#34;../../mfunctions.md&#34;&gt;Mach&amp;rsquo;s Functions&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>PowerShell PIP Bulk Installer</title>
      <link>http://localhost:1313/docs/powershell/pip/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/powershell/pip/</guid>
      <description>&lt;p&gt;This script will bulk install a list of given Python modules and can be ran on user logon (once per device) using GPO.&lt;br&gt;&#xA;It then creates a text file so it doesn&amp;rsquo;t reinstall the modules every time.&lt;br&gt;&#xA;Note: This will update and reinstall all the packages listed.&lt;/p&gt;&#xA;&lt;h2 id=&#34;requirements&#34;&gt;Requirements &lt;a href=&#34;#requirements&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&#xA;&lt;li&gt;Python installed to &amp;ldquo;All Users&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;Pip Installed&lt;/li&gt;&#xA;&lt;li&gt;PowerShell&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;This has been tested and works with Python 3.10 - 3.13&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-script-itself&#34;&gt;The Script itself &lt;a href=&#34;#the-script-itself&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;../../Python_Packages_313.ps1&#34;&gt;Python_Packages_313.ps1&lt;/a&gt;&lt;br&gt;&#xA;&lt;a href=&#34;../../Python_Packages_313_Logger.ps1&#34;&gt;Python_Packages_313_Logger.ps1&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/docs/powershell/searchbase/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/powershell/searchbase/</guid>
      <description>&lt;h1 id=&#34;search-base&#34;&gt;Search Base &lt;a href=&#34;#search-base&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;-SearchBase&lt;br&gt;&#xA;Specifies an Active Directory path to search under.&lt;br&gt;&#xA;&lt;em&gt;&lt;strong&gt;Can be Combined with&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;&#xA;-SearchScope&lt;br&gt;&#xA;Specifies the scope of an Active Directory search. The acceptable values for this parameter are:&lt;br&gt;&#xA;Base or 0&lt;br&gt;&#xA;OneLevel or 1&lt;br&gt;&#xA;Subtree or 2&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;hr&gt;</description>
    </item>
  </channel>
</rss>
